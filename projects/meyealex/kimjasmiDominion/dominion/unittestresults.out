TESTING fullDeckCount()

fullDeckCount(): PASS when counting cards in deck only
fullDeckCount(): PASS when counting cards in discard only
fullDeckCount(): PASS when counting cards in hand only
fullDeckCount(): PASS when counting cards in all piles
fullDeckCount(): PASS when counting cards not present

TESTING getCost()

getCost(): PASS for curse card
getCost(): PASS for estate card
getCost(): PASS for dutchy card
getCost(): PASS for province card
getCost(): PASS for copper card
getCost(): PASS for silver card
getCost(): PASS for gold card
getCost(): PASS for adventurer card
getCost(): PASS for council room card
getCost(): PASS for feast card
getCost(): PASS for gardens card
getCost(): PASS for mine card
getCost(): PASS for remodel card
getCost(): PASS for smithy card
getCost(): PASS for village card
getCost(): PASS for baron card
getCost(): PASS for great hall card
getCost(): PASS for minion card
getCost(): PASS for steward card
getCost(): PASS for tribute card
getCost(): PASS for ambassador card
getCost(): PASS for cutpurse card
getCost(): PASS for embargo card
getCost(): PASS for outpost card
getCost(): PASS for salvager card
getCost(): PASS for sea hag card
getCost(): PASS for treasure map card
getCost(): PASS for nonexistent card

TESTING drawCard()

TESTING drawCard() on non empty deck
drawCard(): PASS decrement deck count when draw from non empty deck
drawCard(): PASS increment hand count when draw from non empty deck
drawCard(): PASS adds top card of deck to player's hand
TESTING drawCard() on an empty deck
drawCard(): PASS clears discard pile
drawCard(): PASS increment hand count
drawCard(): PASS populate empty deck and decrement
drawCard(): PASS discard pile shuffled in deck
drawCard(): PASS adds top deck card into player hand
TESTING drawCard() on empty deck and empty discard)
drawCard(): PASS no change to deck count
drawCard(): PASS no change to discard count
drawCard(): PASS no change to hand count
drawCard(): PASS draw card fails

TESTING updateCoins()

updateCoins(): PASS with no coins or bonus
updateCoins(): PASS with no coins but bonus
updateCoins(): PASS with copper and bonus
updateCoins(): PASS with silver and bonus
updateCoins(): PASS with gold and bonus

TESTING smithyCardEffect()

smithyCardEffect(): PASS adding 3 and removing 1 from hand
smithyCardEffect(): FAIL discarding 1 card
smithyCardEffect(): FAIL smithy card on top of discard pile
smithyCardEffect(): PASS smithy discarded from hand
smithyCardEffect(): PASS 3 cards drawn from player deck

TESTING adventurerCardEffect()

TESTING adventurerCardEffect() with two treasures in deck
adventurerCardEffect(): PASS add two cards to hand
adventurerCardEffect(): PASS added proper treasure cards to hand
adventurerCardEffect(): FAIL discarded all proper cards
adventurerCardEffect(): FAIL discarded adventurer card from hand
TESTING adventurerCardEffect() with a required shuffle
adventurerCardEffect(): PASS added proper treasure cards to hand
adventurerCardEffect(): FAIL discarded proper amount of cards
TESTING adventurerCardEffect() with less than 2 treasure cards
adventurerCardEffect(): FAIL adding 1 treasure card to hand and discarding adventurer
adventruerCardEffect(): FAIL discarding correct cards after a shuffle with 1 treasure

TESTING villageCardEffect()

villageCardEffect(): PASS adding 1 card and discarding 1 card from hand
villageCardEffect(): PASS drew 1 card from deck
villageCardEffect(): FAIL add 1 card to discard pile
villageCardEffect(): PASS village removed from hand
villageCardEffect(): PASS add 2 actions to turn

TESTING greatHallCardEffect()

greatHallCardEffect(): PASS adding 1 card and discarding 1 card from hand
greatHallCardEffect(): PASS drew 1 card from deck
greatHallCardEffect(): FAIL add 1 card to discard pile
greatHallCardEffect(): PASS great_hall removed from hand
greatHallCardEffect(): PASS add 2 actions to turn

Function 'updateCoins'
Lines executed:100.00% of 11
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'gainCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 1

Function 'discardCard'
Lines executed:84.62% of 13
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'ambassador_card'
Lines executed:0.00% of 23
Branches executed:0.00% of 26
Taken at least once:0.00% of 26
Calls executed:0.00% of 4

Function 'feast_card'
Lines executed:0.00% of 17
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 6

Function 'village_card'
Lines executed:100.00% of 6
No branches
Calls executed:100.00% of 3

Function 'smithy_card'
Lines executed:100.00% of 6
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
Calls executed:100.00% of 3

Function 'adventurer_card'
Lines executed:100.00% of 18
Branches executed:100.00% of 12
Taken at least once:91.67% of 12
Calls executed:100.00% of 3

Function 'cardEffect'
Lines executed:9.57% of 188
Branches executed:15.44% of 149
Taken at least once:3.36% of 149
Calls executed:10.91% of 55

Function 'getCost'
Lines executed:100.00% of 30
Branches executed:100.00% of 28
Taken at least once:100.00% of 28
No calls

Function 'drawCard'
Lines executed:100.00% of 22
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
Calls executed:100.00% of 1

Function 'getWinners'
Lines executed:0.00% of 24
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
Calls executed:0.00% of 2

Function 'scoreFor'
Lines executed:0.00% of 24
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
Calls executed:0.00% of 3

Function 'isGameOver'
Lines executed:0.00% of 10
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'endTurn'
Lines executed:0.00% of 20
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 3

Function 'whoseTurn'
Lines executed:100.00% of 2
No branches
No calls

Function 'fullDeckCount'
Lines executed:100.00% of 9
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'supplyCount'
Lines executed:0.00% of 2
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 3
No branches
Calls executed:0.00% of 1

Function 'numHandCards'
Lines executed:0.00% of 2
No branches
Calls executed:0.00% of 1

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
Calls executed:0.00% of 4

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
Calls executed:0.00% of 3

Function 'shuffle'
Lines executed:100.00% of 16
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
Calls executed:100.00% of 2

Function 'initializeGame'
Lines executed:83.87% of 62
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
Calls executed:100.00% of 5

Function 'kingdomCards'
Lines executed:0.00% of 13
No branches
No calls

Function 'newGame'
Lines executed:0.00% of 3
No branches
No calls

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

File 'dominion.c'
Lines executed:36.14% of 570
Branches executed:36.69% of 417
Taken at least once:29.74% of 417
Calls executed:23.00% of 100
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 383 returned 100% blocks executed 83%
      383:    8:int compare(const void* a, const void* b) {
      383:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      383:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
       67:   12:    return -1;
      316:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
call    0 returned 100%
        8:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        8:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       88:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      880:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      800:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        8:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        8:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        8:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  102:  state->supplyCount[silver] = 40;
        8:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      168:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1320:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1240:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       80:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       32:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       16:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       80:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1160:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       24:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       16:  140:      state->deckCount[i] = 0;
       64:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       48:  143:	  state->deck[i][j] = estate;
       48:  144:	  state->deckCount[i]++;
        -:  145:	}
      128:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      112:  148:	  state->deck[i][j] = copper;
      112:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       24:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       16:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       24:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       16:  166:      state->handCount[i] = 0;
       16:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      224:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      216:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        8:  182:  state->outpostPlayed = 0;
        8:  183:  state->phase = 0;
        8:  184:  state->numActions = 1;
        8:  185:  state->numBuys = 1;
        8:  186:  state->playedCardCount = 0;
        8:  187:  state->whoseTurn = 0;
        8:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       48:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        8:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        8:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 24 returned 100% blocks executed 100%
       24:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       24:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       24:  209:  if (state->deckCount[player] < 1)
branch  0 taken 21% (fallthrough)
branch  1 taken 79%
        5:  210:    return -1;
       19:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      258:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      220:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      220:  216:    newDeck[newDeckPos] = state->deck[player][card];
      220:  217:    newDeckPos++;
     1206:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 82%
branch  1 taken 18% (fallthrough)
      986:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      220:  221:    state->deckCount[player]--;
        -:  222:  }
      239:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
      220:  224:    state->deck[player][i] = newDeck[i];
      220:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       19:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 5 returned 100% blocks executed 100%
        5:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
        5:  326:  int count = 0;
        -:  327:
     2505:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  329:    {
     2500:  330:      if (state->deck[player][i] == card) count++;
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  331:    }
        -:  332:
     2505:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  334:    {
     2500:  335:      if (state->hand[player][i] == card) count++;
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  336:    }
        -:  337:
     2505:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  339:    {
     2500:  340:      if (state->discard[player][i] == card) count++;
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  341:    }
        -:  342:
        5:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 13 returned 100% blocks executed 100%
       13:  346:int whoseTurn(struct gameState *state) {
       13:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 74 returned 100% blocks executed 100%
       74:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       74:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       65:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
       60:  534:      state->deck[player][i] = state->discard[player][i];
       60:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        5:  538:    state->deckCount[player] = state->discardCount[player];
        5:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        5:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        5:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        5:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        5:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        5:  559:    if (deckCounter == 0)
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        2:  560:      return -1;
        -:  561:
        3:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        3:  563:    state->deckCount[player]--;
        3:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       69:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       69:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       69:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       69:  576:    state->deckCount[player]--;
       69:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       72:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 28 returned 100% blocks executed 100%
       28:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 6 returned 100% blocks executed 7%
        6:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        6:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        6:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        6:  658:  int drawntreasure=0;
        -:  659:  int cardDrawn;
        6:  660:  int z = 0;// this is the counter for the temp hand
        6:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
        6:  667:  switch( card ) 
branch  0 taken 50%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 17%
branch  7 taken 17%
branch  8 taken 0%
branch  9 taken 17%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case adventurer:
        3:  670:      adventurer_card(state);
call    0 returned 100%
        3:  671:      return 0;
        -:  672:			
        -:  673:    case council_room:
        -:  674:      //+4 Cards
    #####:  675:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  676:	{
    #####:  677:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  678:	}
        -:  679:			
        -:  680:      //+1 Buy
    #####:  681:      state->numBuys++;
        -:  682:			
        -:  683:      //Each other player draws a card
    #####:  684:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  685:	{
    #####:  686:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  687:	    {
    #####:  688:	      drawCard(i, state);
call    0 never executed
        -:  689:	    }
        -:  690:	}
        -:  691:			
        -:  692:      //put played card in played card pile
    #####:  693:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  694:			
    #####:  695:      return 0;
        -:  696:			
        -:  697:    case feast:
    #####:  698:      feast_card(choice1, state);
call    0 never executed
    #####:  699:      return 0;
        -:  700:			
        -:  701:    case gardens:
    #####:  702:      return -1;
        -:  703:			
        -:  704:    case mine:
    #####:  705:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  706:
    #####:  707:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  708:	{
    #####:  709:	  return -1;
        -:  710:	}
        -:  711:		
    #####:  712:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  713:	{
    #####:  714:	  return -1;
        -:  715:	}
        -:  716:
    #####:  717:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  718:	{
    #####:  719:	  return -1;
        -:  720:	}
        -:  721:
    #####:  722:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  723:
        -:  724:      //discard card from hand
    #####:  725:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  726:
        -:  727:      //discard trashed card
    #####:  728:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  729:	{
    #####:  730:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  731:	    {
    #####:  732:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  733:	      break;
        -:  734:	    }
        -:  735:	}
        -:  736:			
    #####:  737:      return 0;
        -:  738:			
        -:  739:    case remodel:
    #####:  740:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  741:
    #####:  742:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  743:	{
    #####:  744:	  return -1;
        -:  745:	}
        -:  746:
    #####:  747:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  748:
        -:  749:      //discard card from hand
    #####:  750:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  751:
        -:  752:      //discard trashed card
    #####:  753:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  754:	{
    #####:  755:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  756:	    {
    #####:  757:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  758:	      break;
        -:  759:	    }
        -:  760:	}
        -:  761:
        -:  762:
    #####:  763:      return 0;
        -:  764:		
        -:  765:    case smithy:
        1:  766:      smithy_card(state, handPos);
call    0 returned 100%
        1:  767:      return 0;
        -:  768:		
        -:  769:    case village:
        1:  770:      village_card(state, handPos);
call    0 returned 100%
        1:  771:      return 0;
        -:  772:		
        -:  773:    case baron:
    #####:  774:      state->numBuys++;//Increase buys by 1!
    #####:  775:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  776:	int p = 0;//Iterator for hand!
    #####:  777:	int card_not_discarded = 1;//Flag for discard set!
    #####:  778:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  779:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  780:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  781:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  782:	    state->discardCount[currentPlayer]++;
    #####:  783:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  784:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  785:	    }
    #####:  786:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  787:	    state->handCount[currentPlayer]--;
    #####:  788:	    card_not_discarded = 0;//Exit the loop
        -:  789:	  }
    #####:  790:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  791:	    if(DEBUG) {
        -:  792:	      printf("No estate cards in your hand, invalid choice\n");
        -:  793:	      printf("Must gain an estate if there are any\n");
        -:  794:	    }
    #####:  795:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  796:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  797:	      state->supplyCount[estate]--;//Decrement estates
    #####:  798:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  799:		isGameOver(state);
call    0 never executed
        -:  800:	      }
        -:  801:	    }
    #####:  802:	    card_not_discarded = 0;//Exit the loop
        -:  803:	  }
        -:  804:			    
        -:  805:	  else{
    #####:  806:	    p++;//Next card
        -:  807:	  }
        -:  808:	}
        -:  809:      }
        -:  810:			    
        -:  811:      else{
    #####:  812:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  813:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  814:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  815:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  816:	    isGameOver(state);
call    0 never executed
        -:  817:	  }
        -:  818:	}
        -:  819:      }
        -:  820:	    
        -:  821:      
    #####:  822:      return 0;
        -:  823:		
        -:  824:    case great_hall:
        -:  825:      //+1 Card
        1:  826:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  827:			
        -:  828:      //+1 Actions
        1:  829:      state->numActions++;
        -:  830:			
        -:  831:      //discard card from hand
        1:  832:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  833:      return 0;
        -:  834:		
        -:  835:    case minion:
        -:  836:      //+1 action
    #####:  837:      state->numActions++;
        -:  838:			
        -:  839:      //discard card from hand
    #####:  840:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  841:			
    #####:  842:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  843:	{
    #####:  844:	  state->coins = state->coins + 2;
        -:  845:	}
        -:  846:			
    #####:  847:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  848:	{
        -:  849:	  //discard hand
    #####:  850:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  851:	    {
    #####:  852:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  853:	    }
        -:  854:				
        -:  855:	  //draw 4
    #####:  856:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  857:	    {
    #####:  858:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  859:	    }
        -:  860:				
        -:  861:	  //other players discard hand and redraw if hand size > 4
    #####:  862:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  863:	    {
    #####:  864:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  865:		{
    #####:  866:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  867:		    {
        -:  868:		      //discard hand
    #####:  869:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  870:			{
    #####:  871:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  872:			}
        -:  873:							
        -:  874:		      //draw 4
    #####:  875:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  876:			{
    #####:  877:			  drawCard(i, state);
call    0 never executed
        -:  878:			}
        -:  879:		    }
        -:  880:		}
        -:  881:	    }
        -:  882:				
        -:  883:	}
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case steward:
    #####:  887:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  888:	{
        -:  889:	  //+2 cards
    #####:  890:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  891:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  892:	}
    #####:  893:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  894:	{
        -:  895:	  //+2 coins
    #####:  896:	  state->coins = state->coins + 2;
        -:  897:	}
        -:  898:      else
        -:  899:	{
        -:  900:	  //trash 2 cards in hand
    #####:  901:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  902:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  903:	}
        -:  904:			
        -:  905:      //discard card from hand
    #####:  906:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  907:      return 0;
        -:  908:		
        -:  909:    case tribute:
    #####:  910:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  911:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  912:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  913:	  state->deckCount[nextPlayer]--;
        -:  914:	}
    #####:  915:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  916:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  917:	  state->discardCount[nextPlayer]--;
        -:  918:	}
        -:  919:	else{
        -:  920:	  //No Card to Reveal
        -:  921:	  if (DEBUG){
        -:  922:	    printf("No cards to reveal\n");
        -:  923:	  }
        -:  924:	}
        -:  925:      }
        -:  926:	    
        -:  927:      else{
    #####:  928:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  929:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  930:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  931:	    state->deckCount[nextPlayer]++;
    #####:  932:	    state->discard[nextPlayer][i] = -1;
    #####:  933:	    state->discardCount[nextPlayer]--;
        -:  934:	  }
        -:  935:			    
    #####:  936:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  937:	} 
    #####:  938:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  939:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  940:	state->deckCount[nextPlayer]--;
    #####:  941:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  942:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  943:	state->deckCount[nextPlayer]--;
        -:  944:      }    
        -:  945:		       
    #####:  946:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  947:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  948:	state->playedCardCount++;
    #####:  949:	tributeRevealedCards[1] = -1;
        -:  950:      }
        -:  951:
    #####:  952:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  953:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  954:	  state->coins += 2;
        -:  955:	}
        -:  956:		    
    #####:  957:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  958:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  959:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  960:	}
        -:  961:	else{//Action Card
    #####:  962:	  state->numActions = state->numActions + 2;
        -:  963:	}
        -:  964:      }
        -:  965:	    
    #####:  966:      return 0;
        -:  967:		
        -:  968:    case ambassador:
    #####:  969:      ambassador_card(choice1, choice2, state, handPos);
call    0 never executed
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case cutpurse:
        -:  973:
    #####:  974:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  975:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  976:	{
    #####:  977:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  978:	    {
    #####:  979:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  980:		{
    #####:  981:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  982:		    {
    #####:  983:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  984:		      break;
        -:  985:		    }
    #####:  986:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  987:		    {
    #####:  988:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  989:			{
        -:  990:			  if (DEBUG)
        -:  991:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  992:			}	
    #####:  993:		      break;
        -:  994:		    }		
        -:  995:		}
        -:  996:					
        -:  997:	    }
        -:  998:				
        -:  999:	}				
        -: 1000:
        -: 1001:      //discard played card from hand
    #####: 1002:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1003:
    #####: 1004:      return 0;
        -: 1005:
        -: 1006:		
        -: 1007:    case embargo: 
        -: 1008:      //+2 Coins
    #####: 1009:      state->coins = state->coins + 2;
        -: 1010:			
        -: 1011:      //see if selected pile is in play
    #####: 1012:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1013:	{
    #####: 1014:	  return -1;
        -: 1015:	}
        -: 1016:			
        -: 1017:      //add embargo token to selected supply pile
    #####: 1018:      state->embargoTokens[choice1]++;
        -: 1019:			
        -: 1020:      //trash card
    #####: 1021:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		
        -: 1024:    case outpost:
        -: 1025:      //set outpost flag
    #####: 1026:      state->outpostPlayed++;
        -: 1027:			
        -: 1028:      //discard card
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case salvager:
        -: 1033:      //+1 buy
    #####: 1034:      state->numBuys++;
        -: 1035:			
    #####: 1036:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //gain coins equal to trashed card
    #####: 1039:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1040:	  //trash card
    #####: 1041:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1042:	}
        -: 1043:			
        -: 1044:      //discard card
    #####: 1045:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1046:      return 0;
        -: 1047:		
        -: 1048:    case sea_hag:
    #####: 1049:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1050:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1051:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1052:	  state->discardCount[i]++;
    #####: 1053:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1054:	}
        -: 1055:      }
    #####: 1056:      return 0;
        -: 1057:		
        -: 1058:    case treasure_map:
        -: 1059:      //search hand for another treasure_map
    #####: 1060:      index = -1;
    #####: 1061:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1064:	    {
    #####: 1065:	      index = i;
    #####: 1066:	      break;
        -: 1067:	    }
        -: 1068:	}
    #####: 1069:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1070:	{
        -: 1071:	  //trash both treasure cards
    #####: 1072:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1073:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1074:
        -: 1075:	  //gain 4 Gold cards
    #####: 1076:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1077:	    {
    #####: 1078:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1079:	    }
        -: 1080:				
        -: 1081:	  //return success
    #####: 1082:	  return 1;
        -: 1083:	}
        -: 1084:			
        -: 1085:      //no second treasure_map found in hand
    #####: 1086:      return -1;
        -: 1087:    }
        -: 1088:	
    #####: 1089:  return -1;
        -: 1090:}
        -: 1091:
        -: 1092://Refactored functions taken from cardEffect function
function adventurer_card called 3 returned 100% blocks executed 100%
        3: 1093:int adventurer_card(struct gameState *state)
        -: 1094:{
        3: 1095:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1096:  int temphand[MAX_HAND];// moved above the if statement
        3: 1097:  int drawntreasure=0;
        -: 1098:  int cardDrawn;
        -: 1099:
        3: 1100:  int z = 0;	// this is the counter for the temp hand
        -: 1101:
        -: 1102:  //Bug #1 : Player will reveal cards from deck until 1 Treasure card is revealed (normally 2 Treasure cards)
        -: 1103:  //BUG FIXED by meyealex
       32: 1104:  while(drawntreasure<2){
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       26: 1105:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 12% (fallthrough)
branch  1 taken 88%
        3: 1106:	  shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1107:	}
       26: 1108:	drawCard(currentPlayer, state);
call    0 returned 100%
       26: 1109:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       26: 1110:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 92% (fallthrough)
branch  3 taken 8%
branch  4 taken 17% (fallthrough)
branch  5 taken 83%
        6: 1111:	  drawntreasure++;
        -: 1112:	else{
       20: 1113:	  temphand[z]=cardDrawn;
       20: 1114:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       20: 1115:	  z++;
        -: 1116:	}
        -: 1117:      }
       26: 1118:      while(z-1>=0){
branch  0 taken 87%
branch  1 taken 13% (fallthrough)
       20: 1119:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
       20: 1120:	z=z-1;
        -: 1121:      }
        3: 1122:      return 0;
        -: 1123:
        -: 1124:}
        -: 1125:
        -: 1126:
function smithy_card called 1 returned 100% blocks executed 100%
        1: 1127:int smithy_card(struct gameState *state, int handPos)
        -: 1128:{
        1: 1129:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1130:	int i;
        -: 1131:
        -: 1132:      //Bug #2 : Player will draw 4 cards rather than the original 3 cards
        -: 1133:      //FIXED by meyealex
        4: 1134:      for (i = 0; i < 3; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1135:	{
        3: 1136:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1137:	}
        -: 1138:			
        -: 1139:      //discard card from hand
        1: 1140:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1: 1141:      return 0;
        -: 1142:}
        -: 1143:
        -: 1144:
function village_card called 1 returned 100% blocks executed 100%
        1: 1145:int village_card(struct gameState *state, int handPos)
        -: 1146:{
        1: 1147:      int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1148:
        -: 1149:	 //+1 Card
        1: 1150:      drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1151:			
        -: 1152:      //+2 Actions
        1: 1153:      state->numActions = state->numActions + 2;
        -: 1154:			
        -: 1155:      //discard played card from hand
        -: 1156:      //Bug #3 : This bug will change the value of trashFlag from 0 to 1 to incorrectly run discardCard
        1: 1157:      discardCard(handPos, currentPlayer, state, 1);
call    0 returned 100%
        1: 1158:      return 0;
        -: 1159:
        -: 1160:}
        -: 1161:
        -: 1162:
function feast_card called 0 returned 0% blocks executed 0%
    #####: 1163:int feast_card(int choice1, struct gameState *state)
        -: 1164:{
        -: 1165:	int i;
        -: 1166:	int x;
    #####: 1167:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1168:	int temphand[MAX_HAND];
        -: 1169:
        -: 1170:	//gain card with cost up to 5
        -: 1171:      //Backup hand
    #####: 1172:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1173:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1174:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1175:      }
        -: 1176:      //Backup hand
        -: 1177:
        -: 1178:      //Update Coins for Buy
    #####: 1179:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####: 1180:      x = 1;//Condition to loop on
    #####: 1181:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####: 1182:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1183:	  if (DEBUG)
        -: 1184:	    printf("None of that card left, sorry!\n");
        -: 1185:
        -: 1186:	  if (DEBUG){
        -: 1187:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1188:	  }
        -: 1189:	}
    #####: 1190:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1191:	  printf("That card is too expensive!\n");
call    0 never executed
        -: 1192:
        -: 1193:	  if (DEBUG){
        -: 1194:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1195:	  }
        -: 1196:	}
        -: 1197:	else{
        -: 1198:
        -: 1199:	  if (DEBUG){
        -: 1200:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1201:	  }
        -: 1202:
        -: 1203:	  //Bug #4 : This bug will set the toFlag value from 0 to 1. Instead of adding card to discard, the card will
        -: 1204:	  //be added to the deck
    #####: 1205:	  gainCard(choice1, state, 1, currentPlayer);//Gain the card
call    0 never executed
    #####: 1206:	  x = 0;//No more buying cards
        -: 1207:
        -: 1208:	  if (DEBUG){
        -: 1209:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1210:	  }
        -: 1211:
        -: 1212:	}
        -: 1213:      }     
        -: 1214:
        -: 1215:      //Reset Hand
    #####: 1216:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1217:	state->hand[currentPlayer][i] = temphand[i];
    #####: 1218:	temphand[i] = -1;
        -: 1219:      }
        -: 1220:      //Reset Hand
        -: 1221:      			
    #####: 1222:      return 0;
        -: 1223:}
        -: 1224:
        -: 1225:
function ambassador_card called 0 returned 0% blocks executed 0%
    #####: 1226:int ambassador_card(int choice1, int choice2, struct gameState *state, int handPos)
        -: 1227:{
        -: 1228:	int i;
        -: 1229:	int j;
    #####: 1230:	int currentPlayer = whoseTurn(state);
call    0 never executed
        -: 1231:	
        -: 1232:
    #####: 1233:	  j = 0;		//used to check if player has enough cards to discard
        -: 1234:
    #####: 1235:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1236:	{
    #####: 1237:	  return -1;				
        -: 1238:	}
        -: 1239:
    #####: 1240:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1241:	{
    #####: 1242:	  return -1;
        -: 1243:	}
        -: 1244:
    #####: 1245:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1246:	{
    #####: 1247:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1248:	    {
    #####: 1249:	      j++;
        -: 1250:	    }
        -: 1251:	}
    #####: 1252:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1253:	{
    #####: 1254:	  return -1;				
        -: 1255:	}
        -: 1256:
        -: 1257:      if (DEBUG) 
        -: 1258:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1259:
        -: 1260:      //increase supply count for choosen card by amount being discarded
    #####: 1261:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1262:			
        -: 1263:      //each other player gains a copy of revealed card
    #####: 1264:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1265:	{
    #####: 1266:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1267:	    {
    #####: 1268:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1269:	    }
        -: 1270:	}
        -: 1271:
        -: 1272:      //discard played card from hand
    #####: 1273:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1274:
        -: 1275:      //trash copies of cards returned to supply
    #####: 1276:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1277:	{
    #####: 1278:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1279:	    {
    #####: 1280:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1281:		{
    #####: 1282:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1283:		  break;
        -: 1284:		}
        -: 1285:	    }
        -: 1286:	}			
        -: 1287:
    #####: 1288:      return 0;
        -: 1289:}
        -: 1290:
        -: 1291:
function discardCard called 3 returned 100% blocks executed 78%
        3: 1292:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1293:{
        -: 1294:	
        -: 1295:  //if card is not trashed, added to Played pile 
        3: 1296:  if (trashFlag < 1)
branch  0 taken 67% (fallthrough)
branch  1 taken 33%
        -: 1297:    {
        -: 1298:      //add card to played pile
        2: 1299:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1300:      state->playedCardCount++;
        -: 1301:    }
        -: 1302:	
        -: 1303:  //set played card to -1
        3: 1304:  state->hand[currentPlayer][handPos] = -1;
        -: 1305:	
        -: 1306:  //remove card from player's hand
        3: 1307:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1308:    {
        -: 1309:      //reduce number of cards in hand
    #####: 1310:      state->handCount[currentPlayer]--;
        -: 1311:    }
        3: 1312:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1313:    {
        -: 1314:      //reduce number of cards in hand
    #####: 1315:      state->handCount[currentPlayer]--;
        -: 1316:    }
        -: 1317:  else 	
        -: 1318:    {
        -: 1319:      //replace discarded card with last card in hand
        3: 1320:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1321:      //set last card to -1
        3: 1322:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1323:      //reduce number of cards in hand
        3: 1324:      state->handCount[currentPlayer]--;
        -: 1325:    }
        -: 1326:	
        3: 1327:  return 0;
        -: 1328:}
        -: 1329:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1330:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1331:{
        -: 1332:  //Note: supplyPos is enum of choosen card
        -: 1333:	
        -: 1334:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1335:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1336:    {
    #####: 1337:      return -1;
        -: 1338:    }
        -: 1339:	
        -: 1340:  //added card for [whoseTurn] current player:
        -: 1341:  // toFlag = 0 : add to discard
        -: 1342:  // toFlag = 1 : add to deck
        -: 1343:  // toFlag = 2 : add to hand
        -: 1344:
    #####: 1345:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1346:    {
    #####: 1347:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1348:      state->deckCount[player]++;
        -: 1349:    }
    #####: 1350:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1351:    {
    #####: 1352:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1353:      state->handCount[player]++;
        -: 1354:    }
        -: 1355:  else
        -: 1356:    {
    #####: 1357:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1358:      state->discardCount[player]++;
        -: 1359:    }
        -: 1360:	
        -: 1361:  //decrease number in supply pile
    #####: 1362:  state->supplyCount[supplyPos]--;
        -: 1363:	 
    #####: 1364:  return 0;
        -: 1365:}
        -: 1366:
function updateCoins called 13 returned 100% blocks executed 100%
       13: 1367:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1368:{
        -: 1369:  int i;
        -: 1370:	
        -: 1371:  //reset coin count
       13: 1372:  state->coins = 0;
        -: 1373:
        -: 1374:  //add coins for each Treasure card in player's hand
       78: 1375:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1376:    {
       65: 1377:      if (state->hand[player][i] == copper)
branch  0 taken 57% (fallthrough)
branch  1 taken 43%
        -: 1378:	{
       37: 1379:	  state->coins += 1;
        -: 1380:	}
       28: 1381:      else if (state->hand[player][i] == silver)
branch  0 taken 18% (fallthrough)
branch  1 taken 82%
        -: 1382:	{
        5: 1383:	  state->coins += 2;
        -: 1384:	}
       23: 1385:      else if (state->hand[player][i] == gold)
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
        -: 1386:	{
        5: 1387:	  state->coins += 3;
        -: 1388:	}	
        -: 1389:    }	
        -: 1390:
        -: 1391:  //add bonus
       13: 1392:  state->coins += bonus;
        -: 1393:
       13: 1394:  return 0;
        -: 1395:}
        -: 1396:
        -: 1397:
        -: 1398://end of dominion.c
        -: 1399:
